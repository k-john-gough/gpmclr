(****************************************************************)
(*								*)
(*		Modula-2 Compiler Source Module			*)
(*								*)
(*               More Syntax Tree Node Definitions              *)
(*								*)
(*    (c) copyright 1988 Faculty of Information Technology      *)
(*								*)
(*      original module : April 1988, jhynd & kjg               *)
(*      modifications   : 					*)
(*      last modified   : add stmnt node - tailRecNode 4-Aug-88 *)
(*			: new field in returnNode     20-Oct-90 *)
(*								*)
(****************************************************************
$Log: m2struct.def,v $
Revision 1.6  1997/01/16 05:09:35  gough
lots of new stuff for case statement changes.

Revision 1.5  1996/11/27 02:57:51  lederman
add retryNode to StatNodeClass

Revision 1.4  1996/09/20 08:04:42  lederman
add 'appendClass' field to StatDesc to classify second param. of APPEND

Revision 1.3  1995/09/15 08:00:50  gough
define new field countDownVar for for loop descriptors

Revision 1.2  1995/03/14 01:53:32  gough
keep aligned with changes in m2nodedefs.def

# Revision 1.1  1994/04/07  05:24:03  lederman
# Initial revision
#
*****************************************************************)

DEFINITION MODULE M2StructureDefs;

FROM M2NodeDefs IMPORT IdDesc, TypeDesc, StrucTree;
FROM M2Designators IMPORT DesigRec, WithDesc, ExprDesc;
FROM M2Alphabets IMPORT HashBucketType, LexAttType;
FROM M2InOut IMPORT Position;
FROM GenSequenceSupport IMPORT Sequence;
 
(* ---------------- from M2NodeDefs --------------------
 *TYPE  StrucTree = POINTER TO StrucRec;
 *	StrucRec = RECORD
 *                   adjBlocks  : Sequence; (* used for calls graph   *)
 *                   adjustSeq  : Sequence; (* adjust open par blocks *)
 *		     maxParSize : INTEGER;
 *                   statements : Sequence; (* main body of the block *)
 *                   tempSize   : CARDINAL; (* set temp size in words *)
 *                   refCount   : CARDINAL;
 *                   visitDepth : CARDINAL;
 *                   callAttrib : AttributeSet;
 *		     usedBkts   : UsedSetPtr;
 *		     loopJunk   : LoopJunk;
 *		     headerLine : CARDINAL; (* initial line number    *)
 *                 END;
 * ----------------------------------------------------- *)

  PROCEDURE CreateStrucTree(VAR block : IdDesc);
  (* postcondition : StrucTree is allocated and initialized,
                     refCount is 0 or 1 as appropriate   *)

(* ----------------------------------------------------- *)

  TYPE  StatDesc   = POINTER TO StatRec;
        RangeDesc  = POINTER TO RangeRec;
        CaseStatDesc = POINTER TO CaseStatRec;

  TYPE RangeRec = RECORD 
		    lower, upper : ExprDesc;
		    desigType    : TypeDesc;
		    elemOffset   : INTEGER; (* constructors Oct 92 *)
		  END;

  PROCEDURE MakeRangeDesc(left, right : ExprDesc) : RangeDesc;

(* ----------------------------------------------------- *)
  TYPE  StatNodeClass = (emptyNode,    (* explicit empty for CASE *)
                         assignNode, procCallNode, caseNode, ifNode,
                         whileNode, repeatNode, loopNode, forNode,
                         withNode, exitNode, returnNode, retryNode,
			 initCallNode,
                         compoundNode, (* inline subst become these *)
                         tailRecNode); (* procCall can become these *)

  TYPE  StatRec = RECORD
                    sourceLoc : Position;
                    CASE statClass : StatNodeClass OF
                    | assignNode, procCallNode, initCallNode, tailRecNode :
			designator : DesigRec;
                        CASE (* same tag *) : StatNodeClass OF
                        | assignNode   : expression   : ExprDesc;
					 desigType    : TypeDesc;
                        | procCallNode : actualParams : Sequence; (* Exps  *)
		                          appendClass : [0..2];
					(* 0 = STRING, 1 = array, 2 = elem *)
                        | tailRecNode  : paramAdjusts : Sequence; (* Stats *)
                        END;
                    | caseNode :
                        caseInfo : CaseStatDesc;
                        cases    : Sequence; (* of CaseRec *)
                        default  : Sequence; (* of StatRec *)
                    | ifNode :
                        branches : Sequence; (* of IfRec *)
                    | whileNode, repeatNode :
                        condition : ExprDesc;
                        wrBody    : Sequence; (* of StatRec *)
                    | loopNode :
                        loopBody  : Sequence; (* of StatRec *)
                        loopLabel : CARDINAL;
                        loopExited : BOOLEAN;
                    | forNode :
                        controlVariable : IdDesc;
                        countDownVar    : IdDesc;
                        initial, final  : ExprDesc;
                        forBody         : Sequence; (* of StatRec *)
                        stepSize        : INTEGER;
                    | withNode :
                        withInfo  : WithDesc;
                        withBody  : Sequence; (* of StatRec *)
                    | returnNode :
                        returnResult : ExprDesc; (* or NIL   *)
			destTypeDesc : TypeDesc; (* or undef *)
		    | compoundNode : 
			inlineBody : Sequence; 
                    ELSE (* exitNode ==> empty *) 
                    END;
                  END;

  PROCEDURE CreateStatDesc(VAR ptr : StatDesc;
                               tag : StatNodeClass);
  (* postcondition : record is allocated and fields initialized *)

(* ----------------------------------------------------- *)

  TYPE  IfDesc   = POINTER TO IfRec;
        IfRec    = RECORD
                     condition : ExprDesc; (* NIL ==> TRUE *)
                     statSeq   : Sequence; (* of StatRec   *)
                   END;

  PROCEDURE CreateConditional(VAR ptr : IfDesc);
  (* postcondition : an IfRec is allocated, with an empty
                     sequence. ptr^.condition is NIL     *)
(* ----------------------------------------------------- *)

  TYPE  CaseDesc = POINTER TO CaseRec;
        CaseRec  = RECORD
		     theLabel : CARDINAL;
                     selRnges : Sequence; (* of RangeRec *)
                     statSeq  : Sequence; (* of StatRec  *)
                   END;

(* ----------------------------------------------------- *)

  TYPE	CRInfo      = RECORD
                        min : INTEGER;		(* min of this range *)
                        max : INTEGER;		(* max of this range *)
                        pos : Position;		(* source position   *)
                        cas : CaseDesc;		(* the RangeDesc ptr *)
                      END;
            
        PrInfo      = RECORD
                        num : CARDINAL;		(* element # in part *)
                        min : INTEGER;		(* min value in part *)
                        max : INTEGER;		(* max value in part *)
                        nIx : INTEGER;		(* string ix of miN  *)
                        xIx : INTEGER;		(* string ix of maX  *)
                      END;
        
  TYPE	CaseString  = STRING OF CRInfo;
	PartString  = STRING OF PrInfo;
      
(* ----------------------------------------------------- *)

  TYPE  CaseStatRec = RECORD
                        switch : ExprDesc;
(* ----------------------------------------------------- *)
			partStr : PartString; (* partition info *)
			caseStr : CaseString; (* caseRange info *)
(* ----------------------------------------------------- *)
(*
 *                      selMin, selMax : CARDINAL; (* or int! *)
 *)
                      END;

  PROCEDURE CreateCaseDesc(VAR ptr : CaseDesc);
  (* postcondition : a CaseRec is allocated with empty Seq's *)

(* ----------------------------------------------------- *)
END M2StructureDefs.
