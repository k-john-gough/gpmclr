(****************************************************************)
(*                                                              *)
(*             Modula-2 Compiler Source Module                  *)
(*                                                              *)
(*                 Static Semantic Utilities                    *)
(*                                                              *)
(*           (c) copyright 1987 SoftWare Automata.              *)
(*                                                              *)
(*      original module : from M2Parser kjg july 1987           *)
(*      modifications   :                                       *)
(*                      :  8-Jun-88, inserting Min and Max      *)
(*                      : 10-Aug-88 JRH Compatibility checks    *)
(*                      : 25-Aug-88 JRH OpenCompatible result   *)
(*                      : 17-Feb-89 JRH Index & range checks    *)
(*			: 16-Mar-89 JRH CheckedAssignCompatible *)
(*			: 23-Mar-89 kjg CheckValidAllocate	*)
(*			: 18-Apr-89 kjg FindAccess removed etc  *)
(*			: 24-May-89 jrh Size and alignment      *)
(*			: 28-May-89 kjg LookupAndMarkUplevel    *)
(*			:  2-Jun-89 kjg HasComplexActuals	*)
(*			: 16-Jun-89 kjg IsString removed	*)
(*			: 16-Aug-89 kjg FixTypeAndValue (new)   *)
(*			:  8-Nov-89 kjg BindFieldOffsets (new)  *)
(*			: 20-Jul-90 kjg ConstAssignComatible    *)
(*		        : 27-Mar-91 kjg Save and show type info *)
(*                                                              *)
(****************************************************************
$Log: m2ssutil.def,v $
Revision 1.5  1997/01/16 05:03:55  gough
new procedure EquivPrecons.

Revision 1.4  1995/10/10 23:34:00  lederman
replace ExprCost() & HasComplexActuals() with HasCalls()

# Revision 1.3  1995/03/23  23:06:22  gough
# must pass formal to Va*OpenCompat in case it is multidimensional
#
# Revision 1.2  1995/03/14  01:50:04  gough
# Split OpenCompatible into two: ValOpenCompatible and VarOpenCompatible
#
# Revision 1.1  1994/04/07  05:21:39  lederman
# Initial revision
#
*****************************************************************)

DEFINITION MODULE M2SSUtilities;

FROM M2NodeDefs  IMPORT IdDesc, IdTree, TypeRec, TypeDesc, FormalType;
FROM M2Alphabets IMPORT LexAttType, HashBucketType;
FROM GenSequenceSupport IMPORT Sequence;
FROM M2Designators IMPORT ExprDesc, ExprRec, ActualParMode;

    (****************************************************)
    (*               Utility Procedures                 *)
    (****************************************************)

    PROCEDURE LookupInThisScope(tree : IdTree;
                                hsIx : HashBucketType;
                            VAR desc : IdDesc);

    PROCEDURE Lookup(key   : HashBucketType;
                 VAR found : IdDesc); (* NIL if not found *)

    PROCEDURE LookupAndMarkUplevel( key   : HashBucketType;
		 		VAR found : IdDesc); (* NIL if not found *)
    (* postcondition : found points to IdRec if object is visible,
		       else is NIL. If object is uplevel, object
		       is marked as having been used in this
		       scope so that the illegal forward ref
		       test can be implemented			*)


    PROCEDURE LookupInModList(hsh : HashBucketType;
                              VAR ptr : IdDesc);

    (****************************************************)

    PROCEDURE LoadGlobals(left, right : TypeDesc);
    PROCEDURE DisplayLeftType();
    PROCEDURE DisplayRightType();

    (****************************************************)

    PROCEDURE EnterScope(id : IdDesc);
    (* postcondition : id^.scope (or id^.exports) becomes
                       the current scope, and the previous
                       scope becomes either "uphill" or
                       "outside" for this new scope     *)

    PROCEDURE ExitScope;
    (* postcondition : the previous scope is restored   *)

    PROCEDURE SetCurrentScope(id : IdDesc);
    (* during traversal, starts lookup in correct scope *)

    (****************************************************)

    PROCEDURE Compatible(t1, t2 : TypeDesc) : BOOLEAN;
    (* tests for t1, t2 expression compatible *)

    PROCEDURE OrdinalValue(t1 : TypeDesc;
                           v1 : LexAttType) : CARDINAL;

    PROCEDURE EquivPrecons(def, elab : ExprDesc) : BOOLEAN;
    (* beware, this test is not symmetric! *)

    (****************************************************)

    PROCEDURE MinOfOrdType(ty : TypeDesc) : CARDINAL;
    PROCEDURE MaxOfOrdType(ty : TypeDesc) : CARDINAL;
    (* reports error if type not ordinal, returns 0 *)

    PROCEDURE IndexCardinality(ty : TypeDesc) : CARDINAL;
    (* precondition : ty is an array type *)

    PROCEDURE IsStringType(ty : TypeDesc) : BOOLEAN;

    PROCEDURE IsSignedType(ty : TypeDesc) : BOOLEAN;

    PROCEDURE IsOrdinalType(ty : TypeDesc) : BOOLEAN;

    PROCEDURE IsOwnOpaque(id : IdDesc) : BOOLEAN;
    (* true iff id is a hidden type from own module *)

    PROCEDURE FixTypeAndValue(VAR val : LexAttType;
			      VAR typ : TypeDesc);
    (* changes tyClass to II, ZZ or UU as appropriate   *)
    (* and moves val.fixValue to val.charValue if necc. *)

(* ------------------------------------------------------------------------ *) 


    PROCEDURE StringLength(type : TypeDesc) : CARDINAL;
    (*
      Return the length of the string type.
    *)

    PROCEDURE IsVariable (actual : ExprDesc) : BOOLEAN;
    (*
      Determine if the actual parameter is a variable, and so acceptable as a 
      variable parameter.
    *)

    PROCEDURE UnivConform (t1, t2 : TypeDesc) : BOOLEAN;
    (*
      Determine if types t1 & t2 are compatible due to the universal 
      conformability of WORD & ADDRESS. 
    *)

    PROCEDURE CheckedAssignCompatible ( expr : ExprDesc; 
					type : TypeDesc;
				    VAR isOk : BOOLEAN);
    (*
      Determine if expr(ession) is assignment-compatible with type.
      If not, return isOk FALSE; if so, perform compile-time range checks and
      return isOk TRUE.
    *)

    PROCEDURE ValOpenCompatible (actual : TypeDesc; 
				 formal : FormalType) : ActualParMode;
    PROCEDURE VarOpenCompatible (actual : TypeDesc;
				 formal : FormalType) : ActualParMode;
   (*
    * Check if actual parameter of type actual is compatible with formal open 
    * array parameter of element type element. Return the actual parameter mode 
    * open1D for normal open arrays, openWord or openByte for the universally
    * conformable parameters, and notActual for errors.
    * Multi-dimensional open arrays are yet to be treated.
    *)

(* ------------------------------------------------------------------------ *) 

    PROCEDURE IndexCheckC (VAR expr : ExprRec; typ : TypeDesc);

    (* 
      Check if a constant index value is in the range of the index type typ.
      Precondition: expr is a literalNode Compatible with typ.
      Postcondition: error detected, or no runtime check needed.
    *)

    PROCEDURE RangeCheckC (VAR expr : ExprRec; ordTyp : TypeDesc);
    
    (* 
      Check if a constant value is in the range of the type ordTyp.
      Precondition: expr is a literalNode AssignCompatible with ordinal type
      ordTyp.
      Postcondition: error detected, or no runtime check needed.
    *)

    PROCEDURE CheckValidAllocate(alloc : IdDesc);
    (*
      pre  : alloc is an IdDesc designating ALLLOCATE or DEALLOCATE
      post : errors if IdDesc is not compatible with "standard" ALLOCATE
    *)

    PROCEDURE TypesOverlap (dstType : TypeDesc;
    			    srcType : TypeDesc) : BOOLEAN;
    (*
      pre  : types must be ordinal types
      post : result = "source range is enclosed in destination range"
     *)

    PROCEDURE LiteralInRange(dstType : TypeDesc;
    			 VAR litExpr : ExprRec) : BOOLEAN;
    (*
      pre  : exprRec must be literal, dstType must be ordinal
      post : result = "value is enclosed in destination range"
     *)

    PROCEDURE Align (oldSize : CARDINAL; alignment : CHAR) : CARDINAL;
    (* Return oldSize rounded up, if necessary, to the next boundary
       corresponding to alignment *)
  
    PROCEDURE AlignAndAdd (VAR rTy : TypeDesc;
                           addAlignment : CHAR; addSize : CARDINAL);
    (* Increase the size of record type rTy^ to begin the next component 
       at an addAlignment boundary; then add a component of addSize to 
       the record size; also upgrade rTy^'s overall alignment if necessary.
    *)

    PROCEDURE MaxSizeAndAlignment (VAR unTp : TypeDesc; vTp : TypeDesc);
    (* Make the size and alignment of the union type unTp^ the maximum of their
       current values and those of the variant vTp^.
    *)

    CONST procCost = 10000;

    PROCEDURE HasCalls(exp : ExprDesc) : BOOLEAN;
    (* comparative cost of expression evaluation *)

    PROCEDURE BindFieldOffsets(VAR recTyp : TypeRec);
    (* Precondition  : size and alignMask fields have been set 
		       recRec is a fully formed errorless TyRec  
       Postcondition : fieldOffset fields are inserted in descr. *)

END M2SSUtilities.
